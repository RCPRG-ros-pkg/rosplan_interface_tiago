#!/usr/bin/env python

import rospy
import yaml
import rospkg
from geometry_msgs.msg import Pose, Point, Quaternion
from rosplan_tiago_core_msgs.srv import *
from rospy_message_converter import message_converter


CONFIG_RELATIVE_PATH = '/config/locations.yml'
PKG_NAME = 'rosplan_tiago_params'


class LocationNameServer:
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"

        # service for query data from yml
        self.srv = rospy.Service('location_name_service', GetLocation, self.get_location_from_yml)
        rospy.loginfo('{} Ready to get location by its name (plan value)'.format(self.node_name))

        # path to yml file
        rospack = rospkg.RosPack()
        rospack_path = rospack.get_path(PKG_NAME)
        self.yaml_file_path = rospack_path + CONFIG_RELATIVE_PATH

    def get_location_from_yml(self, msg):
        is_location_name_found = False

        point_zeros = Point(0, 0, 0)
        quaternion_zeros = Quaternion(0, 0, 0, 1)
        pose = Pose(point_zeros, quaternion_zeros)

        with open(self.yaml_file_path, 'r') as yaml_file:
            cur_yaml = yaml.safe_load(yaml_file)
            if cur_yaml is None:
                cur_yaml = {}

            for named_pose_key, named_pose_value in cur_yaml.items():
                if named_pose_value['name'] == msg.location:
                    rospy.loginfo('{} Got matching location name!'.format(self.node_name))
                    is_location_name_found = True
                    pose_dict = named_pose_value['pose']
                    pose = message_converter.convert_dictionary_to_ros_message('geometry_msgs/Pose', pose_dict)
                    break

            if not is_location_name_found:
                rospy.logerr('{} No matching location name - returning zeros'.format(self.node_name))

            return GetLocationResponse(pose)


if __name__ == '__main__':
    rospy.init_node('location_name_service')
    LocationNameServer()
    rospy.spin()
