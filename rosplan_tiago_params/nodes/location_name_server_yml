#!/usr/bin/env python

import os
import rospy
import yaml
from geometry_msgs.msg import PoseStamped
from rospy_message_converter import message_converter
from visualization_msgs.msg import MarkerArray
from rosplan_tiago_params.srv import *


class LocationNameServer:
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"

        # service for query data from yml
        self.srv = rospy.Service('location_name_service', GetLocation, self.__get_location)
        rospy.loginfo('{} Ready to get location by its name (plan value)'.format(self.node_name))

        # publish markers to view all poses on rviz
        self.pub = rospy.Publisher("location_name_server/pose_markers", MarkerArray)

        self.dirpath = os.getcwd()
        # self.yaml_file_path = self.dirpath + '/../result.yml'
        # TODO set yml location, move posesaver from common to this pkg
        self.yaml_file_path = 'result.yml'


    def callback(self, msg):
        # convert msg to dictionary
        dictionary = message_converter.convert_ros_message_to_dictionary(msg)
        # get only pose data and also give the name to the pose
        # here parse the goal to yaml file
        with open(self.yaml_file_path, 'r') as yaml_file:
            cur_yaml = yaml.safe_load(yaml_file)
            if cur_yaml is None:
                cur_yaml = {}

            new_key = 'PoseNamed{}'.format(len(cur_yaml))
            dictionary = {
                new_key: {
                    'name': 'temp_pose_name',
                    'pose': dictionary['pose']
                }
            }

            cur_yaml.update(dictionary)

        with open(self.yaml_file_path, 'w') as yaml_file:
            yaml.safe_dump(cur_yaml, yaml_file, default_flow_style=False)


if __name__ == '__main__':
    rospy.init_node('location_name_server')
    LocationNameServer()
    rospy.spin()
