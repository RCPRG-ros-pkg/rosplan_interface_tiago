#!/usr/bin/env python

import rospy
import yaml
import pprint
import rospkg
from geometry_msgs.msg import PoseStamped
from rospy_message_converter import message_converter

CONFIG_RELATIVE_PATH = '/config/locations.yml'
PKG_NAME = 'rosplan_tiago_params'


class PoseSaver:
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.sub_topic_name = "move_base_simple/goal"

        rospy.Subscriber(self.sub_topic_name, PoseStamped, self.callback, queue_size=1)
        rospy.loginfo('{} Ready save poses from topic: {}'.format(self.node_name, self.sub_topic_name))

        # path to yml file
        rospack = rospkg.RosPack()
        rospack_path = rospack.get_path(PKG_NAME)
        self.yaml_file_path = rospack_path + CONFIG_RELATIVE_PATH

    def callback(self, msg):
        # convert msg to dictionary
        dictionary = message_converter.convert_ros_message_to_dictionary(msg)
        # get only pose data and also give the name to the pose
        # here parse the goal to yaml file
        with open(self.yaml_file_path, 'r') as yaml_file:
            cur_yaml = yaml.safe_load(yaml_file)
            if cur_yaml is None:
                cur_yaml = {}

            new_key = 'PoseNamed{}'.format(len(cur_yaml))
            dictionary = {
                new_key: {
                    'name': 'temp_pose_name',
                    'pose': dictionary['pose']
                }
            }

            pretty_dictionary = pprint.pformat(dictionary)
            rospy.loginfo('{} Got new pose:\n{}'.format(self.node_name, pretty_dictionary))
            cur_yaml.update(dictionary)

        with open(self.yaml_file_path, 'w') as yaml_file:
            yaml.safe_dump(cur_yaml, yaml_file, default_flow_style=False)

        rospy.loginfo('{} The new pose has been written to file'.format(self.node_name, self.sub_topic_name))


if __name__ == '__main__':
    rospy.init_node('pose_from_goal_saver')
    PoseSaver()
    rospy.spin()
