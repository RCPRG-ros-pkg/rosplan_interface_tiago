#!/usr/bin/env python

import rospy
import actionlib
import smach
import smach_ros

from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractAction
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionGoal
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionFeedback
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionResult
from rosplan_tiago_common.tiago_torso_controller import TiagoSpeechController
from rosplan_tiago_common.tiago_torso_controller import TiagoHeadController
from pal_common_msgs.msg import *


class Initialize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        # now the server receives only pose
        goal = userdata.init_goal.human

        return 'ok'


class SetHeadPose(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.head_controller = TiagoHeadController()
        self.pal_head_manager_client = actionlib.SimpleActionClient('pal_head_manager/disable', DisableAction)
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take control over head movement
        self.pal_head_manager_client.wait_for_server()
        pal_head_manager_goal = DisableGoal()
        pal_head_manager_goal.duration = 0
        self.pal_head_manager_client.send_goal(pal_head_manager_goal)

        # move head down
        self.head_controller.tilt_up()

        return 'ok'


class SayHello(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Hi human. Please listen to me!')
        rospy.sleep(3)

        return 'ok'


class GatherFacts(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Let me think what i found.')
        # query KB here and pass it through STATE output keys

        rospy.sleep(3)

        return 'ok'


class GiveFacts(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Hi i need to tell you what i found!')
        rospy.sleep(3)
        self.speech_controller.tts('Item one at position x')
        rospy.sleep(3)
        self.speech_controller.tts('Item two at position y')
        rospy.sleep(3)
        self.speech_controller.tts('That is all, human. Take care')
        rospy.sleep(3)

        return 'ok'


class SayBye(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Good bye dude.')
        rospy.sleep(3)

        return 'ok'


class ReleaseHead(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.pal_head_manager_client = actionlib.SimpleActionClient('pal_head_manager/disable', DisableAction)
        self.head_controller = TiagoHeadController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # bring back default head
        self.pal_head_manager_client.wait_for_server()
        self.pal_head_manager_client.cancel_all_goals()

        # head up
        self.head_controller.tilt_forward()

        return 'ok'


class Finalize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # prepare some feedback & result

        return 'ok'


class HumanInteractServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=[])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'SetHeadPose',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal'})

            smach.StateMachine.add('SetHeadPose',
                                   SetHeadPose(),
                                   transitions={'ok': 'SayHello',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SayHello',
                                   SayHello(),
                                   transitions={'ok': 'GatherFacts',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('GatherFacts',
                                   GatherFacts(),
                                   transitions={'ok': 'GiveFacts',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('GiveFacts',
                                   GiveFacts(),
                                   transitions={'ok': 'SayBye',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SayBye',
                                   SayBye(),
                                   transitions={'ok': 'ReleaseHead',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('ReleaseHead',
                                   ReleaseHead(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={})


def main():
    rospy.init_node('human_interact_server')

    # Construct state machine
    sm = HumanInteractServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('human_interact_server', sm, '/SM_HUMAN_INTERACT_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='human_interact',
        action_spec=HumanInteractAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal')
        # feedback_key='sm_feedback',
        # result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
