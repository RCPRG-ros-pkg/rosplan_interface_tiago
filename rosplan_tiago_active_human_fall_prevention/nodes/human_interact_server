#!/usr/bin/env python

import rospy
import smach
import smach_ros

from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractAction
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionGoal
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionFeedback
from rosplan_tiago_active_human_fall_prevention.msg import HumanInteractActionResult


class Initialize(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'],
                             output_keys=['init_feedback',
                                          'init_item',
                                          'init_params'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        # now the server receives only pose
        goal = userdata.init_goal.blind_goal

        userdata.init_item = goal

        rospy.sleep(1)
        return 'ok'


class Dummy(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['dummy_goal',
                                         'dummy_params'],
                             output_keys=['dummy_feedback',
                                          'dummy_info'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # robot movement here - using Tiago move_base
        goal = userdata.dummy_goal

        print goal

        rospy.sleep(3)
        return 'ok'


class Finalize(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['final_info'],
                             output_keys=['final_feedback',
                                          'final_result'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # prepare some feedback & result
        action_feedback = HumanInteractActionFeedback()
        action_feedback.feedback.percent_complete = 8
        userdata.final_feedback = action_feedback.feedback

        action_result = HumanInteractActionResult()
        action_result.result.is_undocked = 1
        userdata.final_result = action_result.result

        # robot approach check may be put here, some distances calculated
        rospy.sleep(2)
        return 'ok'


class HumanInteractServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=['sm_feedback',
                                                 'sm_result'])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'Dummy',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal',
                                              'init_feedback': 'sm_feedback',
                                              'init_item': 'sm_goal',
                                              'init_params': 'sm_params'})

            smach.StateMachine.add('Dummy',
                                   Dummy(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'dummy_goal': 'sm_goal',
                                              'dummy_params': 'sm_params',
                                              'dummy_feedback': 'sm_feedback',
                                              'dummy_info': 'sm_info'})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={'final_info': 'sm_info',
                                              'final_feedback': 'sm_feedback',
                                              'final_result': 'sm_result'})


def main():
    rospy.init_node('human_interact_server')

    # Construct state machine
    sm = HumanInteractServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('human_interact_server', sm, '/SM_HUMAN_INTERACT_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='human_interact',
        action_spec=HumanInteractAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal',
        feedback_key='sm_feedback',
        result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
