#!/usr/bin/env python

import rospy
import smach
import smach_ros
from collections import OrderedDict

from rosplan_tiago_scenarios_msgs.msg import HumanApproachDetectAction, HumanApproachDetectActionFeedback, HumanApproachDetectActionResult
from rosplan_tiago_common.tiago_kb import TiagoKBUpdate
from rosplan_tiago_common.rosplan_control import ROSPlanSysControlClient
from std_msgs.msg import Empty


class Initialize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        # now the server receives only pose
        goal = userdata.init_goal.dummy_goal

        rospy.sleep(1)
        return 'ok'


class HumanApproachDetection(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.is_human_coming = False
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def callback(self, msg):
        self.is_human_coming = True

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        tiago_kb = TiagoKBUpdate()
        rosplan_control = ROSPlanSysControlClient()

        # block until human is coming
        rospy.wait_for_message('~/human_coming', Empty)

        # remove scanning area goals
        # dictionary order is IMPORTANT - knowledge values are based on this so i use OrderedDict
        key_value = []
        for i in range(6):
            temp_dict = OrderedDict([("loc_from", "wp{}".format(i)), ("loc_to", "wp{}".format(i+1))])
            key_value.append(temp_dict)

        tiago_kb.add_remove_goals("scanned_area", key_value, should_add=False)

        # remove human_detection_ongoing
        temp_ordered_dict = OrderedDict([("human", "luke")])
        tiago_kb.add_remove_goals("human_detection_ongoing", [temp_ordered_dict], should_add=False)

        # add human_informed goal
        temp_ordered_dict = OrderedDict([("human", "luke")])
        tiago_kb.add_remove_goals("human_informed", [temp_ordered_dict], should_add=True)

        # add robot at initial position
        # temp_ordered_dict = OrderedDict([("obj", "rico"), ("loc", "initial")])
        # tiago_kb.add_remove_knowledge("at", [temp_ordered_dict], should_add=True)

        # handle "human_coming" fact
        tiago_kb.add_remove_knowledge("human_coming", [], should_add=True)
        tiago_kb.add_remove_knowledge("not_human_coming", [], should_add=True, is_negation=True)
        tiago_kb.add_remove_knowledge("human_coming", [], should_add=False, is_negation=True)
        tiago_kb.add_remove_knowledge("not_human_coming", [], should_add=False)

        # rosplan master-blaster here
        rosplan_control.replan_immediately_routine()

        # now exit gently by returning smach ending code
        return 'preemption'


class Finalize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # prepare some feedback & result

        return 'ok'


class HumanApproachDetectServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=[])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'HumanApproachDetection',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal'})

            smach.StateMachine.add('HumanApproachDetection',
                                   HumanApproachDetection(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={})


def main():
    rospy.init_node('human_approach_detect_server')

    # Construct state machine
    sm = HumanApproachDetectServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('human_approach_detect_server', sm, '/SM_HUMAN_APPROACH_DETECT_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='human_approach_detect',
        action_spec=HumanApproachDetectAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal')
        # feedback_key='sm_feedback',
        # result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
