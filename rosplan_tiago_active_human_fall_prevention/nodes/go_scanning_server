#!/usr/bin/env python

import rospy
import smach
import smach_ros
import actionlib
import dynamic_reconfigure.client

from rosplan_tiago_active_human_fall_prevention.msg import GoScanningAction, GoScanningActionGoal, GoScanningActionFeedback, GoScanningActionResult
from move_base_msgs.msg import *
from actionlib_msgs.msg import GoalStatus
from pal_common_msgs.msg import *
from rosplan_tiago_common.tiago_torso_controller import TiagoHeadController
from rosplan_tiago_common.tiago_kb import TiagoKBQuery


NAVIGATION_MAX_TIME_S = 120


class Initialize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'],
                             output_keys=['init_feedback',
                                          'init_params',
                                          'init_goal_pose',
                                          'init_result'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take goal, split into pose and params
        # now the server receives only pose
        goal_pose = userdata.init_goal.pose
        userdata.init_goal_pose = goal_pose

        # goal_params = userdata.init_goal.params

        action_feeback = GoScanningActionFeedback()
        action_feeback.feedback.how_many_items_detected = 0
        userdata.init_feedback = action_feeback.feedback

        action_result = GoScanningActionResult()
        action_result.result.is_goal_accomplished = False
        userdata.init_result = action_result.result

        return 'ok'


class SetNavParams(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.dynparam_client = dynamic_reconfigure.client.Client('move_base/PalLocalPlanner')
        self.pal_head_manager_client = actionlib.SimpleActionClient('pal_head_manager/disable', DisableAction)
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['set_nav_params_params'],
                             output_keys=['set_nav_params_feedback',
                                          'set_nav_params_result'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take control over head movement
        self.pal_head_manager_client.wait_for_server()
        pal_head_manager_goal = DisableGoal()
        pal_head_manager_goal.duration = 0
        self.pal_head_manager_client.send_goal(pal_head_manager_goal)

        # setting planner params so it the robot moves slowly
        # params = userdata.set_nav_params_params
        params = {
            'max_vel_x': 0.1,
            'acc_lim_x': 0.05
        }

        config = self.dynparam_client.update_configuration(params)
        # print params

        action_feeback = GoScanningActionFeedback()
        action_feeback.feedback.how_many_items_detected = 0
        userdata.set_nav_params_feedback = action_feeback.feedback

        action_result = GoScanningActionResult()
        action_result.result.is_goal_accomplished = False
        userdata.set_nav_params_result = action_result.result

        return 'ok'


class ScanArea(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.move_base_status = GoalStatus.PENDING
        self.is_move_base_finished = False
        self.head_controller = TiagoHeadController()
        self.tiago_kb_query = TiagoKBQuery(is_silent=True)
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['scan_area_goal_pose'],
                             output_keys=['scan_area_feedback',
                                          'scan_area_result'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # robot movement here - using Tiago move_base
        pose = userdata.scan_area_goal_pose

        goal = MoveBaseGoal()
        goal.target_pose.pose = pose
        goal.target_pose.header.frame_id = 'map'
        goal.target_pose.header.stamp = rospy.Time.now()

        # move head down
        self.head_controller.tilt_down()
        # move the robot
        client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        client.wait_for_server()

        # start moving
        client.send_goal(goal, self.move_base_done_cb)

        # handle movement
        start_time = rospy.Time.now()
        self.is_move_base_finished = False
        while self.is_move_base_finished == False:
            end_time = rospy.Time.now()
            loop_time = end_time - start_time
            loop_time_s = loop_time.secs
            if loop_time_s > NAVIGATION_MAX_TIME_S:
                # break the loop, end with error state
                rospy.logwarn('{}: {}: Navigation took too much time, returning error'.format(self.node_name,
                                                                                              self.__class__.__name__))
                client.cancel_all_goals()
                return 'error'

            is_human_coming = self.tiago_kb_query.query_fact('human_coming', [])
            if is_human_coming[0]:
                rospy.logwarn('{}: {}: Human is coming, preempting action'.format(self.node_name,
                                                                                  self.__class__.__name__))
                client.cancel_all_goals()
                return 'preemption'

            # TODO here use image recognition

            # TODO here put KB update

            rospy.sleep(0.5)

        # Here check move_base DONE status
        if self.move_base_status != GoalStatus.SUCCEEDED:
            rospy.logwarn('{}: {}: Navigation ended but returned with code: {}'.format(self.node_name,
                                                                                       self.__class__.__name__,
                                                                                       self.move_base_status))
            return 'error'

        # Prepare feedback & result
        action_feeback = GoScanningActionFeedback()
        action_feeback.feedback.how_many_items_detected = 0
        userdata.scan_area_feedback = action_feeback.feedback

        action_result = GoScanningActionResult()
        action_result.result.is_goal_accomplished = False
        userdata.scan_area_result = action_result.result

        return 'ok'

    def move_base_done_cb(self, status, result):
        self.is_move_base_finished = True
        self.move_base_status = status


class Finalize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.dynparam_client = dynamic_reconfigure.client.Client('move_base/PalLocalPlanner')
        self.pal_head_manager_client = actionlib.SimpleActionClient('pal_head_manager/disable', DisableAction)
        self.head_controller = TiagoHeadController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['final_result'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))
        # set default params back
        params = {
            'max_vel_x': 0.5,
            'acc_lim_x': 0.2
        }
        config = self.dynparam_client.update_configuration(params)

        # bring back default head
        self.pal_head_manager_client.wait_for_server()
        self.pal_head_manager_client.cancel_all_goals()

        # HEAD UP
        self.head_controller.tilt_forward()
        # prepare some result
        action_result = GoScanningActionResult()
        action_result.result.is_goal_accomplished = True
        userdata.final_result = action_result.result

        return 'ok'


class GoScanningServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=['sm_feedback',
                                                 'sm_result'])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'SetNavParams',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal',
                                              'init_feedback': 'sm_feedback',
                                              'init_params': 'sm_params',
                                              'init_goal_pose': 'sm_goal_pose',
                                              'init_result': 'sm_result'})

            smach.StateMachine.add('SetNavParams',
                                   SetNavParams(),
                                   transitions={'ok': 'ScanArea',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'set_nav_params_params': 'sm_params',
                                              'set_nav_params_feedback': 'sm_feedback',
                                              'set_nav_params_result': 'sm_result'})
            smach.StateMachine.add('ScanArea',
                                   ScanArea(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'scan_area_goal_pose': 'sm_goal_pose',
                                              'scan_area_feedback': 'sm_feedback',
                                              'scan_area_result': 'sm_result'})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={'final_result': 'sm_result'})


def main():
    rospy.init_node('go_scanning_server')

    # Construct state machine
    sm = GoScanningServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('go_scanning_server', sm, '/SM_GO_SCANNING_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='go_scanning',
        action_spec=GoScanningAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal',
        feedback_key='sm_feedback',
        result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
