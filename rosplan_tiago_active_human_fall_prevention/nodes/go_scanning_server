#!/usr/bin/env python
import rospy
import smach
import smach_ros

from rosplan_tiago_hazard_detection.msg import CheckAction
from rosplan_tiago_hazard_detection.msg import CheckActionGoal
from rosplan_tiago_hazard_detection.msg import CheckActionFeedback
from rosplan_tiago_hazard_detection.msg import CheckActionResult


class Initialize(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'],
                             output_keys=['init_feedback',
                                          'init_params'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        rospy.sleep(2)
        return 'ok'


class GetData(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'skipComputing', 'preemption', 'error'],
                             input_keys=['gdata_params'],
                             output_keys=['gdata_feedback',
                                          'gdata_data',
                                          'gdata_params'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # robot movement here
        rospy.sleep(1)
        return 'ok'


class ComputeData(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['cdata_data',
                                         'cdata_params'],
                             output_keys=['cdata_feedback',
                                          'cdata_output',
                                          'cdata_params'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # robot approach check may be put here, some distances calculated
        rospy.sleep(1)
        return 'ok'


class MakeDecision(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['mdec_input',
                                         'mdec_params'],
                             output_keys=['mdec_feedback',
                                          'mdec_decision'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # robot movement here
        rospy.sleep(1)
        return 'ok'


class Finalize(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['final_decision'],
                             output_keys=['final_feedback',
                                          'final_result'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # prepare some feedback & result
        action_feedback = CheckActionFeedback()
        action_feedback.feedback.percent_complete = 80
        userdata.final_feedback = action_feedback.feedback

        action_result = CheckActionResult()
        action_result.result.is_undocked = 8
        userdata.final_result = action_result.result

        # robot approach check may be put here, some distances calculated
        rospy.sleep(2)
        return 'ok'


class CheckServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'CHECKED'],
                                    input_keys=['sm_goal'],
                                    output_keys=['sm_feedback',
                                                 'sm_result'])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'GetData',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal',
                                              'init_feedback': 'sm_feedback',
                                              'init_params': 'sm_params'})

            smach.StateMachine.add('GetData',
                                   GetData(),
                                   transitions={'ok': 'ComputeData',
                                                'skipComputing': 'MakeDecision',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'gdata_params': 'sm_params',
                                              'gdata_feedback': 'sm_feedback',
                                              'gdata_data': 'sm_data'})

            smach.StateMachine.add('ComputeData',
                                   ComputeData(),
                                   transitions={'ok': 'MakeDecision',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'cdata_data': 'sm_data',
                                              'cdata_params': 'sm_params',
                                              'cdata_feedback': 'sm_feedback',
                                              'cdata_output': 'sm_output'})

            smach.StateMachine.add('MakeDecision',
                                   MakeDecision(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'mdec_input': 'sm_input',
                                              'mdec_params': 'sm_params',
                                              'mdec_feedback': 'sm_feedback',
                                              'mdec_decision': 'sm_decision'})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'ok': 'CHECKED',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'final_decision': 'sm_decision',
                                              'final_feedback': 'sm_feedback',
                                              'final_result': 'sm_result'})


def main():
    rospy.init_node('check_server')

    # Construct state machine
    sm = CheckServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('check_server', sm, '/SM_CHECK_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='check',
        action_spec=CheckAction,
        wrapped_container=sm,
        succeeded_outcomes=['CHECKED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal',
        feedback_key='sm_feedback',
        result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
