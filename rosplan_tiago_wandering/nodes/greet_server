#!/usr/bin/env python

import rospy
import smach
import smach_ros

from geometry_msgs.msg import Pose

from rosplan_tiago_scenarios_msgs.msg import GreetAction
from rosplan_tiago_scenarios_msgs.msg import GreetActionGoal
from rosplan_tiago_scenarios_msgs.msg import GreetActionFeedback
from rosplan_tiago_scenarios_msgs.msg import GreetActionResult

from rosplan_tiago_common.tiago_utils import move_base_set_goal


class Initialize(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'],
                             output_keys=['init_feedback',
                                          'init_greet'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        # now the server receives only pose
        greet = userdata.init_goal.greet_scenario
        userdata.init_greet = greet

        rospy.sleep(1)
        return 'ok'


class HumanSeek(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['humanseek_feedback'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        rospy.sleep(1)
        return 'ok'


class HumanTurn(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['humanturn_feedback'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        rospy.sleep(1)
        return 'ok'


class SayGreet(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['saygreet_feedback'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        rospy.sleep(1)
        return 'ok'


class MoveHead(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['movehead_feedback'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        rospy.sleep(1)
        return 'ok'


class SayBye(smach.State):
    def __init__(self):
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=[],
                             output_keys=['saybye_feedback',
                                          'saybye_result'])

    def execute(self, userdata):
        rospy.loginfo('Executing state: {}'.format(self.__class__.__name__))

        # prepare some feedback & result
        action_feedback = GreetActionFeedback()
        action_feedback.feedback.percent_complete = 59
        userdata.saybye_feedback = action_feedback.feedback

        action_result = GreetActionResult()
        action_result.result.is_greeted = True
        userdata.saybye_result = action_result.result

        rospy.sleep(2)
        return 'ok'


class GreetServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'GREETED'],
                                    input_keys=['sm_goal'],
                                    output_keys=['sm_feedback',
                                                 'sm_result'])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'HumanSeek',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal',
                                              'init_feedback': 'sm_feedback',
                                              'init_greet': 'sm_greet'})

            smach.StateMachine.add('HumanSeek',
                                   HumanSeek(),
                                   transitions={'ok': 'HumanTurn',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'humanseek_feedback': 'sm_feedback'})

            smach.StateMachine.add('HumanTurn',
                                   HumanTurn(),
                                   transitions={'ok': 'SayGreet',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'humanturn_feedback': 'sm_feedback'})

            smach.StateMachine.add('SayGreet',
                                   SayGreet(),
                                   transitions={'ok': 'MoveHead',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'saygreet_feedback': 'sm_feedback'})

            smach.StateMachine.add('MoveHead',
                                   MoveHead(),
                                   transitions={'ok': 'SayBye',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'movehead_feedback': 'sm_feedback'})

            smach.StateMachine.add('SayBye',
                                   SayBye(),
                                   transitions={'ok': 'GREETED',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'saybye_feedback': 'sm_feedback',
                                              'saybye_result': 'sm_result'})


def main():
    rospy.init_node('greet_server')

    # Construct state machine
    sm = GreetServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('greet_server', sm, '/SM_GREET_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='greet',
        action_spec=GreetAction,
        wrapped_container=sm,
        succeeded_outcomes=['GREETED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal',
        feedback_key='sm_feedback',
        result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
