#!/usr/bin/env python

import rospy
import smach
import smach_ros

from rosplan_tiago_transportation_attendant.msg import GetLoadAction
from rosplan_tiago_transportation_attendant.msg import GetLoadActionGoal
from rosplan_tiago_transportation_attendant.msg import GetLoadActionFeedback
from rosplan_tiago_transportation_attendant.msg import GetLoadActionResult
from rosplan_tiago_common.tiago_torso_controller import TiagoSpeechController


class Initialize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        goal = userdata.init_goal.human

        return 'ok'


class AskToWait(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Wait, please!')
        rospy.sleep(3)

        return 'ok'


class SetHeight(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Setting my height!')
        rospy.sleep(3)

        return 'ok'


class AllowToGet(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('You can put item on me now.')
        rospy.sleep(3)

        return 'ok'


class DefaultHeight(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Bringing back my default height.')
        rospy.sleep(3)

        return 'ok'


class Finalize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # prepare some feedback & result
        # robot approach check may be put here, some distances calculated

        return 'ok'


class GetLoadServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=['sm_feedback',
                                                 'sm_result'])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'AskToWait',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal'})

            smach.StateMachine.add('AskToWait',
                                   AskToWait(),
                                   transitions={'ok': 'SetHeight',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SetHeight',
                                   SetHeight(),
                                   transitions={'ok': 'AllowToGet',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('AllowToGet',
                                   AllowToGet(),
                                   transitions={'ok': 'DefaultHeight',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('DefaultHeight',
                                   DefaultHeight(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={})


def main():
    rospy.init_node('get_load_server')

    # Construct state machine
    sm = GetLoadServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('get_load_server', sm, '/SM_GET_LOAD_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='get_load',
        action_spec=GetLoadAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal')
        # feedback_key='sm_feedback',
        # result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
