#!/usr/bin/env python

import rospy
import smach
import smach_ros
import dynamic_reconfigure.client
import actionlib

from move_base_msgs.msg import *
from actionlib_msgs.msg import GoalStatus
from rosplan_tiago_scenarios_msgs.msg import GoWithAttendanceAction
from rosplan_tiago_scenarios_msgs.msg import GoWithAttendanceActionGoal
from rosplan_tiago_scenarios_msgs.msg import GoWithAttendanceActionFeedback
from rosplan_tiago_scenarios_msgs.msg import GoWithAttendanceActionResult
from rosplan_tiago_common.tiago_torso_controller import TiagoSpeechController
from rosplan_tiago_common.tiago_torso_controller import TiagoTorsoController


NAVIGATION_MAX_TIME_S = 200


class Initialize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['init_goal'],
                             output_keys=['init_params',
                                          'init_goal_pose',
                                          'init_human'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # take goal, check values, split into pose and params, check if params are okay
        human = userdata.init_goal.human
        pose = userdata.init_goal.pose

        userdata.init_goal_pose = pose
        userdata.init_human = human
        return 'ok'


class SetNavParams(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.dynparam_client = dynamic_reconfigure.client.Client('move_base/PalLocalPlanner')
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # setting planner params so it the robot moves slowly
        # params = userdata.set_nav_params_params
        params = {
            'max_vel_x': 0.2,
            'acc_lim_x': 0.05
        }

        config = self.dynparam_client.update_configuration(params)

        return 'ok'


class SetHeight(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        self.torso_controller = TiagoTorsoController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('Setting my height for moving.')

        # set height from 0.00 to 0.35
        self.torso_controller.set_torso_height(0.0)
        rospy.sleep(3)

        return 'ok'


class TellAboutStart(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['input_human'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        human = userdata.input_human
        human_name = human.name
        self.speech_controller.tts("Let's go, {}. Please hold me.".format(human_name))
        rospy.sleep(3)

        return 'ok'


class Navigate(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.move_base_status = GoalStatus.PENDING
        self.is_move_base_finished = False
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'],
                             input_keys=['nav_goal_pose'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # robot movement here - using Tiago move_base
        pose = userdata.nav_goal_pose

        goal = MoveBaseGoal()
        goal.target_pose.pose = pose
        goal.target_pose.header.frame_id = 'map'
        goal.target_pose.header.stamp = rospy.Time.now()

        # move the robot
        client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        client.wait_for_server()

        # start moving
        client.send_goal(goal, self.move_base_done_cb)

        # handle movement
        start_time = rospy.Time.now()
        self.is_move_base_finished = False
        while self.is_move_base_finished == False:
            end_time = rospy.Time.now()
            loop_time = end_time - start_time
            loop_time_s = loop_time.secs
            if loop_time_s > NAVIGATION_MAX_TIME_S:
                # break the loop, end with error state
                rospy.logwarn('{}: {}: Navigation took too much time, returning error'.format(self.node_name,
                                                                                              self.__class__.__name__))
                client.cancel_all_goals()
                return 'error'

            rospy.sleep(0.5)

        # Here check move_base DONE status
        if self.move_base_status != GoalStatus.SUCCEEDED:
            rospy.logwarn('{}: {}: Navigation ended but returned with code: {}'.format(self.node_name,
                                                                                       self.__class__.__name__,
                                                                                       self.move_base_status))
            return 'error'

        return 'ok'

    def move_base_done_cb(self, status, result):
        self.is_move_base_finished = True
        self.move_base_status = status

        return 'ok'


class TellAboutStop(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        self.speech_controller.tts('I have stopped moving!')
        rospy.sleep(3)

        return 'ok'


class SetDefaultParams(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.dynparam_client = dynamic_reconfigure.client.Client('move_base/PalLocalPlanner')
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # set default params back
        params = {
            'max_vel_x': 0.5,
            'acc_lim_x': 0.2
        }
        config = self.dynparam_client.update_configuration(params)

        return 'ok'


class SetDefaultHeight(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        self.speech_controller = TiagoSpeechController()
        self.torso_controller = TiagoTorsoController()
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # self.speech_controller.tts('Let me take a breath.')
        # self.torso_controller.set_torso_height(0.2)
        # rospy.sleep(2)

        return 'ok'


class Finalize(smach.State):
    def __init__(self):
        self.node_name = "(" + rospy.get_name() + ")"
        smach.State.__init__(self,
                             outcomes=['ok', 'preemption', 'error'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(self.node_name, self.__class__.__name__))

        # prepare some feedback & result
        # robot approach check may be put here, some distances calculated

        return 'ok'


class GoWithAttendanceServer(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['PREEMPTED',
                                              'FAILED',
                                              'SM_SUCCEEDED'],
                                    input_keys=['sm_goal'],
                                    output_keys=[])

        # Fill the machine here
        with self:
            smach.StateMachine.add('Initialize',
                                   Initialize(),
                                   transitions={'ok': 'SetNavParams',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'init_goal': 'sm_goal',
                                              'init_goal_pose': 'sm_goal_pose',
                                              'init_human': 'sm_human'})

            smach.StateMachine.add('SetNavParams',
                                   SetNavParams(),
                                   transitions={'ok': 'SetHeight',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SetHeight',
                                   SetHeight(),
                                   transitions={'ok': 'TellAboutStart',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('TellAboutStart',
                                   TellAboutStart(),
                                   transitions={'ok': 'Navigate',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'input_human': 'sm_human'})

            smach.StateMachine.add('Navigate',
                                   Navigate(),
                                   transitions={'ok': 'TellAboutStop',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={'nav_goal_pose': 'sm_goal_pose'})

            smach.StateMachine.add('TellAboutStop',
                                   TellAboutStop(),
                                   transitions={'ok': 'SetDefaultParams',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SetDefaultParams',
                                   SetDefaultParams(),
                                   transitions={'ok': 'SetDefaultHeight',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('SetDefaultHeight',
                                   SetDefaultHeight(),
                                   transitions={'ok': 'Finalize',
                                                'preemption': 'PREEMPTED',
                                                'error': 'FAILED'},
                                   remapping={})

            smach.StateMachine.add('Finalize',
                                   Finalize(),
                                   transitions={'preemption': 'PREEMPTED',
                                                'error': 'FAILED',
                                                'ok': 'SM_SUCCEEDED'},
                                   remapping={})


def main():
    rospy.init_node('go_with_attendance_server')

    # Construct state machine
    sm = GoWithAttendanceServer()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('go_with_attendance_server', sm, '/SM_GO_WITH_ATTENDANCE_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='go_with_attendance',
        action_spec=GoWithAttendanceAction,
        wrapped_container=sm,
        succeeded_outcomes=['SM_SUCCEEDED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='sm_goal')
        # feedback_key='sm_feedback',
        # result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
